#!/bin/bash
#
# script:      get-image-architectures
# 
# description: This script fetches all architectures and their digests for a passed image.
#              It will output each arch on its own line, as json.
#
# example command:  
#              get-image-architectures IMAGE where IMAGE is quay.io/org/repo@sha256:abcde for example
#

IMAGE=$1

if [ -z "${IMAGE}" ] || [[ "${IMAGE}" == docker://* ]] ; then
    echo -e "Please pass an image (without the docker:// prefix) to find the architectures for"
    exit 1
fi

RAW_OUTPUT=$(skopeo inspect --no-tags --raw docker://${IMAGE})

ARTIFACT_TYPE=$(jq -r '.artifactType' <<< $RAW_OUTPUT)
if [ "$ARTIFACT_TYPE" != "null" ] ; then
    # OCI artifact (not a normal image)
    digest=$(echo $IMAGE | awk -F '@' '{print $2}')
    if [[ ! "$digest" =~ ^sha256: ]] ; then
        echo "Could not determine digest for $IMAGE of artifactType ${ARTIFACT_TYPE}"
        exit 1;
    fi

    # Just report that the image is for linux/amd64, which is not exactly true - but,
    # downstream release-service-catalog tasks expect to find something. Use this as a default.
    jq -cr -n --arg digest "$digest" \
        '{"platform": {"architecture": "amd64", "os": "linux"}, "digest": $ARGS.named["digest"]}'
elif [ $(jq -r '.mediaType' <<< $RAW_OUTPUT) == "application/vnd.oci.image.manifest.v1+json" ] ; then
    # Single arch, so need to run skopeo inspect again without --raw
    RAW_OUTPUT=$(skopeo inspect --no-tags docker://${IMAGE})
    architecture=$(jq -r '.Architecture' <<< $RAW_OUTPUT)
    os=$(jq -r '.Os' <<< $RAW_OUTPUT)
    digest=$(jq -r '.Digest' <<< $RAW_OUTPUT)

    jq -cr -n --arg architecture "$architecture" --arg os "$os" --arg digest "$digest" \
        '{"platform": {"architecture": $ARGS.named["architecture"], "os": $ARGS.named["os"]}, "digest": $ARGS.named["digest"]}'
else
    # Multi arch
    jq -cr '.manifests[]' <<< $RAW_OUTPUT
fi
