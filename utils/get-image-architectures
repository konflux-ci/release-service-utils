#!/bin/bash
#
# script:      get-image-architectures
#
# description: This script fetches all architectures and their digests for a passed image.
#              It will output each arch on its own line, as json.
#
# example command:
#              get-image-architectures IMAGE where IMAGE is quay.io/org/repo@sha256:abcde for example
#
set -e

show_help(){
    echo "Usage: $1 [--skopeo-retries <#retries>] [-h|--help] <image>"
    exit 1
}

if [ ${#@} -eq 0 ]; then
    show_help
fi

SKOPEO_RETRIES=(--retry-times 3)

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--skopeo-retries")
            SKOPEO_RETRIES=(--retry-times "$2")
            shift 2
            ;;
        -h|--help)
            show_help
            ;;
        *)
            IMAGE=$1
            shift
            ;;
    esac
done

if [ -z "${IMAGE}" ] || [[ "${IMAGE}" == docker://* ]] ; then
    echo "Error: Please pass an image (without the docker:// prefix) to find the architectures for" >&2
    exit 1
fi

RAW_OUTPUT=$(skopeo inspect "${SKOPEO_RETRIES[@]}" --no-tags --raw docker://${IMAGE})

ARTIFACT_TYPE=$(jq -r '.artifactType' <<< $RAW_OUTPUT)
if [ "$ARTIFACT_TYPE" != "null" ] ; then
    # OCI artifact (not a normal image)
    digest=$(echo $IMAGE | awk -F '@' '{print $2}')
    if [[ ! "$digest" =~ ^sha256: ]] ; then
        AUTH_FILE=$(mktemp)
        select-oci-auth $IMAGE > $AUTH_FILE
        digest=$(oras resolve --registry-config "$AUTH_FILE" "$IMAGE")
    fi

    # Just report that the image is for linux/amd64, which is not exactly true - but,
    # downstream release-service-catalog tasks expect to find something. Use this as a default.
    jq -cr -n --arg digest "$digest" \
        '{"platform": {"architecture": "amd64", "os": "linux"}, "digest": $ARGS.named["digest"], "multiarch": false}'
elif [ $(jq -r '.mediaType' <<< $RAW_OUTPUT) == "application/vnd.oci.image.manifest.v1+json" ] ; then
    # Single arch, so need to run skopeo inspect again without --raw
    RAW_OUTPUT=$(skopeo inspect "${SKOPEO_RETRIES[@]}" --no-tags docker://${IMAGE})
    architecture=$(jq -r '.Architecture' <<< $RAW_OUTPUT)
    os=$(jq -r '.Os' <<< $RAW_OUTPUT)
    digest=$(jq -r '.Digest' <<< $RAW_OUTPUT)

    jq -cr -n --arg architecture "$architecture" --arg os "$os" --arg digest "$digest" \
        '{"platform": {"architecture": $ARGS.named["architecture"], "os": $ARGS.named["os"]}, "digest": $ARGS.named["digest"], "multiarch": false}'
elif [ $(jq -r '.mediaType' <<< $RAW_OUTPUT) == "application/vnd.docker.distribution.manifest.v2+json" ] ; then
    RAW_OUTPUT=$(skopeo inspect "${SKOPEO_RETRIES[@]}" --no-tags docker://${IMAGE})
    architecture=$(jq -r '.Architecture // ""' <<< $RAW_OUTPUT)
    os=$(jq -r '.Os // ""' <<< $RAW_OUTPUT)
    digest=$(jq -r '.Digest' <<< $RAW_OUTPUT)

    # tekton bundles produced by tkn do not set the architecture or OS so
    # default to linux/amd64
    jq -cr -n --arg architecture "${architecture:-amd64}" --arg os "${os:-linux}" --arg digest "$digest" \
        '{"platform": {"architecture": $ARGS.named["architecture"], "os": $ARGS.named["os"]}, "digest": $ARGS.named["digest"], "multiarch": false}'
else
    # Multi arch
    manifests=$(jq '.manifests[] += {multiarch: true}' <<< "$RAW_OUTPUT")
    jq -cr '.manifests[]' <<< "$manifests"
fi
