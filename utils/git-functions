#!/usr/bin/env sh
#
# Functions to manage git repositories

git_functions_usage() {
    echo -e "Usage:"
    echo -e "\t~$ export GIT_AUTHOR_NAME=<name>"
    echo -e "\t~$ export GIT_AUTHOR_EMAIL=<email>"
    echo -e "\t~$ export ACCESS_TOKEN=<github key>"
    echo -e "\t~$ . git-functions"
}

git_config_ident() {
    git config user.name "${GIT_AUTHOR_NAME}" 
    git config user.email "${GIT_AUTHOR_EMAIL}"
}

git_commit_and_push() {
    OPTIONS=$(getopt -l "branch:,message:" -o "b:m:" -a -- "$@")
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
            -b|--branch)
                shift
                BRANCH=$1
                ;;
            -m|--message)
                shift
                COMMIT_MSG="$1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done
    git checkout -b $BRANCH
    git_config_ident
    git commit -a -m "$COMMIT_MSG"
    git push origin $BRANCH
}

git_clone_and_checkout() {
    OPTIONS=$(getopt -l "repository:,revision:" -o "r:v:" -a -- "$@")
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
            -r|--repository)
                shift
                REPOSITORY=$1
                ;;
            -v|--revision)
                shift
                REVISION="$1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    echo "Cloning the Repository..."

    REPO_DIR=$(basename ${REPOSITORY} .git)

    # rewrites the repo url with the auth token
    CLONE_URL="https://oauth2:${ACCESS_TOKEN}@${REPOSITORY#*://}"
    git clone --depth 1 $CLONE_URL
    cd $REPO_DIR
    git checkout $REVISION
}

git_functions_init() {
  # an actual user should be set
  [ -z "${GIT_AUTHOR_NAME}" -o -z "${GIT_AUTHOR_EMAIL}" ] && git_functions_usage && return 1

  # it should not continue if ACCESS_TOKEN
  [ -z "${ACCESS_TOKEN}" ] && git_functions_usage && return 1
}
